#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xomorod.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Xomorod")]
	public partial class XomorodDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertErrorLog(ErrorLog instance);
    partial void UpdateErrorLog(ErrorLog instance);
    partial void DeleteErrorLog(ErrorLog instance);
    partial void InsertExtraLink(ExtraLink instance);
    partial void UpdateExtraLink(ExtraLink instance);
    partial void DeleteExtraLink(ExtraLink instance);
    partial void InsertPortfolioCategory(PortfolioCategory instance);
    partial void UpdatePortfolioCategory(PortfolioCategory instance);
    partial void DeletePortfolioCategory(PortfolioCategory instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUserInRole(UserInRole instance);
    partial void UpdateUserInRole(UserInRole instance);
    partial void DeleteUserInRole(UserInRole instance);
    partial void InsertPortfolio(Portfolio instance);
    partial void UpdatePortfolio(Portfolio instance);
    partial void DeletePortfolio(Portfolio instance);
    #endregion
		
		public XomorodDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["XomorodConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public XomorodDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public XomorodDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public XomorodDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public XomorodDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ErrorLog> ErrorLogs
		{
			get
			{
				return this.GetTable<ErrorLog>();
			}
		}
		
		public System.Data.Linq.Table<ExtraLink> ExtraLinks
		{
			get
			{
				return this.GetTable<ExtraLink>();
			}
		}
		
		public System.Data.Linq.Table<LogHistory> LogHistories
		{
			get
			{
				return this.GetTable<LogHistory>();
			}
		}
		
		public System.Data.Linq.Table<PortfolioCategory> PortfolioCategories
		{
			get
			{
				return this.GetTable<PortfolioCategory>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<UserInRole> UserInRoles
		{
			get
			{
				return this.GetTable<UserInRole>();
			}
		}
		
		public System.Data.Linq.Table<Portfolio> Portfolios
		{
			get
			{
				return this.GetTable<Portfolio>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_CatchError")]
		public int sp_CatchError([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RaisError", DbType="Bit")] System.Nullable<bool> raisError, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExtraData", DbType="NVarChar(MAX)")] string extraData, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ErrorId", DbType="BigInt")] ref System.Nullable<long> errorId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, raisError, extraData, errorId);
			errorId = ((System.Nullable<long>)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_InsertErrorLog")]
		public ISingleResult<sp_InsertErrorLogResult> sp_InsertErrorLog(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ServerDateTime", DbType="DateTime")] System.Nullable<System.DateTime> serverDateTime, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Host", DbType="NVarChar(128)")] string host, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="Int")] System.Nullable<int> user, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsHandled", DbType="Bit")] System.Nullable<bool> isHandled, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="VarChar(200)")] string type, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="AppName", DbType="VarChar(200)")] string appName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="CurrentCulture", DbType="NVarChar(128)")] string currentCulture, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="CLRVersion", DbType="NVarChar(128)")] string cLRVersion, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Message", DbType="NVarChar(MAX)")] string message, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Source", DbType="NVarChar(MAX)")] string source, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="StackTrace", DbType="NVarChar(MAX)")] string stackTrace, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ModuleName", DbType="VarChar(200)")] string moduleName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="MemberType", DbType="NVarChar(128)")] string memberType, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Method", DbType="VarChar(500)")] string method, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Processes", DbType="VarChar(MAX)")] string processes, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ErrorDateTime", DbType="DateTime")] System.Nullable<System.DateTime> errorDateTime, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OS", DbType="VarChar(1000)")] string oS, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IPv4Address", DbType="NVarChar(128)")] string iPv4Address, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="MACAddress", DbType="NVarChar(128)")] string mACAddress, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="HResult", DbType="Int")] System.Nullable<int> hResult, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Line", DbType="Int")] System.Nullable<int> line, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Column", DbType="Int")] System.Nullable<int> column, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Duplicate", DbType="Int")] System.Nullable<int> duplicate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Data", DbType="Xml")] System.Xml.Linq.XElement data)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), serverDateTime, host, user, isHandled, type, appName, currentCulture, cLRVersion, message, source, stackTrace, moduleName, memberType, method, processes, errorDateTime, oS, iPv4Address, mACAddress, hResult, line, column, duplicate, data);
			return ((ISingleResult<sp_InsertErrorLogResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _ParentCategoryId;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<PortfolioCategory> _PortfolioCategories;
		
		private EntityRef<Category> _Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentCategoryIdChanging(System.Nullable<int> value);
    partial void OnParentCategoryIdChanged();
    #endregion
		
		public Category()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._PortfolioCategories = new EntitySet<PortfolioCategory>(new Action<PortfolioCategory>(this.attach_PortfolioCategories), new Action<PortfolioCategory>(this.detach_PortfolioCategories));
			this._Category1 = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCategoryId", DbType="Int")]
		public System.Nullable<int> ParentCategoryId
		{
			get
			{
				return this._ParentCategoryId;
			}
			set
			{
				if ((this._ParentCategoryId != value))
				{
					if (this._Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ParentCategoryId = value;
					this.SendPropertyChanged("ParentCategoryId");
					this.OnParentCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Categories", ThisKey="Id", OtherKey="ParentCategoryId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_PortfolioCategory", Storage="_PortfolioCategories", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<PortfolioCategory> PortfolioCategories
		{
			get
			{
				return this._PortfolioCategories;
			}
			set
			{
				this._PortfolioCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Category1", ThisKey="ParentCategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category1
		{
			get
			{
				return this._Category1.Entity;
			}
			set
			{
				Category previousValue = this._Category1.Entity;
				if (((previousValue != value) 
							|| (this._Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category1.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Category1.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ParentCategoryId = value.Id;
					}
					else
					{
						this._ParentCategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = null;
		}
		
		private void attach_PortfolioCategories(PortfolioCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_PortfolioCategories(PortfolioCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _FullName;
		
		private string _Username;
		
		private string _Password;
		
		private System.DateTime _ModifyDate;
		
		private string _Email;
		
		private EntitySet<ErrorLog> _ErrorLogs;
		
		private EntitySet<UserInRole> _UserInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnModifyDateChanging(System.DateTime value);
    partial void OnModifyDateChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			this._ErrorLogs = new EntitySet<ErrorLog>(new Action<ErrorLog>(this.attach_ErrorLogs), new Action<ErrorLog>(this.detach_ErrorLogs));
			this._UserInRoles = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles), new Action<UserInRole>(this.detach_UserInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="Date NOT NULL")]
		public System.DateTime ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ErrorLog", Storage="_ErrorLogs", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<ErrorLog> ErrorLogs
		{
			get
			{
				return this._ErrorLogs;
			}
			set
			{
				this._ErrorLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserInRole", Storage="_UserInRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserInRole> UserInRoles
		{
			get
			{
				return this._UserInRoles;
			}
			set
			{
				this._UserInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ErrorLogs(ErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ErrorLogs(ErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ErrorLog")]
	public partial class ErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ErrorId;
		
		private System.Nullable<System.DateTime> _ServerDateTime;
		
		private string _Host;
		
		private System.Nullable<bool> _IsHandled;
		
		private string _Type;
		
		private string _AppName;
		
		private System.Xml.Linq.XElement _Data;
		
		private string _CurrentCulture;
		
		private string _CLRVersion;
		
		private string _Message;
		
		private string _Source;
		
		private string _StackTrace;
		
		private string _ModuleName;
		
		private string _MemberType;
		
		private string _Method;
		
		private string _Processes;
		
		private System.Nullable<System.DateTime> _ErrorDateTime;
		
		private string _OS;
		
		private string _IPv4Address;
		
		private string _MACAddress;
		
		private System.Nullable<int> _HResult;
		
		private System.Nullable<int> _Line;
		
		private System.Nullable<int> _Column;
		
		private System.Nullable<int> _DuplicateNo;
		
		private System.Nullable<System.Guid> _UserId;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIdChanging(long value);
    partial void OnErrorIdChanged();
    partial void OnServerDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnServerDateTimeChanged();
    partial void OnHostChanging(string value);
    partial void OnHostChanged();
    partial void OnIsHandledChanging(System.Nullable<bool> value);
    partial void OnIsHandledChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAppNameChanging(string value);
    partial void OnAppNameChanged();
    partial void OnDataChanging(System.Xml.Linq.XElement value);
    partial void OnDataChanged();
    partial void OnCurrentCultureChanging(string value);
    partial void OnCurrentCultureChanged();
    partial void OnCLRVersionChanging(string value);
    partial void OnCLRVersionChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnModuleNameChanging(string value);
    partial void OnModuleNameChanged();
    partial void OnMemberTypeChanging(string value);
    partial void OnMemberTypeChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnProcessesChanging(string value);
    partial void OnProcessesChanged();
    partial void OnErrorDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnErrorDateTimeChanged();
    partial void OnOSChanging(string value);
    partial void OnOSChanged();
    partial void OnIPv4AddressChanging(string value);
    partial void OnIPv4AddressChanged();
    partial void OnMACAddressChanging(string value);
    partial void OnMACAddressChanged();
    partial void OnHResultChanging(System.Nullable<int> value);
    partial void OnHResultChanged();
    partial void OnLineChanging(System.Nullable<int> value);
    partial void OnLineChanged();
    partial void OnColumnChanging(System.Nullable<int> value);
    partial void OnColumnChanged();
    partial void OnDuplicateNoChanging(System.Nullable<int> value);
    partial void OnDuplicateNoChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    #endregion
		
		public ErrorLog()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ErrorId
		{
			get
			{
				return this._ErrorId;
			}
			set
			{
				if ((this._ErrorId != value))
				{
					this.OnErrorIdChanging(value);
					this.SendPropertyChanging();
					this._ErrorId = value;
					this.SendPropertyChanged("ErrorId");
					this.OnErrorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ServerDateTime
		{
			get
			{
				return this._ServerDateTime;
			}
			set
			{
				if ((this._ServerDateTime != value))
				{
					this.OnServerDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ServerDateTime = value;
					this.SendPropertyChanged("ServerDateTime");
					this.OnServerDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Host", DbType="NVarChar(200)")]
		public string Host
		{
			get
			{
				return this._Host;
			}
			set
			{
				if ((this._Host != value))
				{
					this.OnHostChanging(value);
					this.SendPropertyChanging();
					this._Host = value;
					this.SendPropertyChanged("Host");
					this.OnHostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHandled", DbType="Bit")]
		public System.Nullable<bool> IsHandled
		{
			get
			{
				return this._IsHandled;
			}
			set
			{
				if ((this._IsHandled != value))
				{
					this.OnIsHandledChanging(value);
					this.SendPropertyChanging();
					this._IsHandled = value;
					this.SendPropertyChanged("IsHandled");
					this.OnIsHandledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(200)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppName", DbType="NVarChar(200)")]
		public string AppName
		{
			get
			{
				return this._AppName;
			}
			set
			{
				if ((this._AppName != value))
				{
					this.OnAppNameChanging(value);
					this.SendPropertyChanging();
					this._AppName = value;
					this.SendPropertyChanged("AppName");
					this.OnAppNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentCulture", DbType="NVarChar(200)")]
		public string CurrentCulture
		{
			get
			{
				return this._CurrentCulture;
			}
			set
			{
				if ((this._CurrentCulture != value))
				{
					this.OnCurrentCultureChanging(value);
					this.SendPropertyChanging();
					this._CurrentCulture = value;
					this.SendPropertyChanged("CurrentCulture");
					this.OnCurrentCultureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLRVersion", DbType="VarChar(100)")]
		public string CLRVersion
		{
			get
			{
				return this._CLRVersion;
			}
			set
			{
				if ((this._CLRVersion != value))
				{
					this.OnCLRVersionChanging(value);
					this.SendPropertyChanging();
					this._CLRVersion = value;
					this.SendPropertyChanged("CLRVersion");
					this.OnCLRVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(MAX)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="NVarChar(MAX)")]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleName", DbType="VarChar(200)")]
		public string ModuleName
		{
			get
			{
				return this._ModuleName;
			}
			set
			{
				if ((this._ModuleName != value))
				{
					this.OnModuleNameChanging(value);
					this.SendPropertyChanging();
					this._ModuleName = value;
					this.SendPropertyChanged("ModuleName");
					this.OnModuleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberType", DbType="VarChar(200)")]
		public string MemberType
		{
			get
			{
				return this._MemberType;
			}
			set
			{
				if ((this._MemberType != value))
				{
					this.OnMemberTypeChanging(value);
					this.SendPropertyChanging();
					this._MemberType = value;
					this.SendPropertyChanged("MemberType");
					this.OnMemberTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="VarChar(500)")]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processes", DbType="NVarChar(MAX)")]
		public string Processes
		{
			get
			{
				return this._Processes;
			}
			set
			{
				if ((this._Processes != value))
				{
					this.OnProcessesChanging(value);
					this.SendPropertyChanging();
					this._Processes = value;
					this.SendPropertyChanged("Processes");
					this.OnProcessesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ErrorDateTime
		{
			get
			{
				return this._ErrorDateTime;
			}
			set
			{
				if ((this._ErrorDateTime != value))
				{
					this.OnErrorDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ErrorDateTime = value;
					this.SendPropertyChanged("ErrorDateTime");
					this.OnErrorDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OS", DbType="VarChar(1000)")]
		public string OS
		{
			get
			{
				return this._OS;
			}
			set
			{
				if ((this._OS != value))
				{
					this.OnOSChanging(value);
					this.SendPropertyChanging();
					this._OS = value;
					this.SendPropertyChanged("OS");
					this.OnOSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPv4Address", DbType="VarChar(50)")]
		public string IPv4Address
		{
			get
			{
				return this._IPv4Address;
			}
			set
			{
				if ((this._IPv4Address != value))
				{
					this.OnIPv4AddressChanging(value);
					this.SendPropertyChanging();
					this._IPv4Address = value;
					this.SendPropertyChanged("IPv4Address");
					this.OnIPv4AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MACAddress", DbType="VarChar(50)")]
		public string MACAddress
		{
			get
			{
				return this._MACAddress;
			}
			set
			{
				if ((this._MACAddress != value))
				{
					this.OnMACAddressChanging(value);
					this.SendPropertyChanging();
					this._MACAddress = value;
					this.SendPropertyChanged("MACAddress");
					this.OnMACAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HResult", DbType="Int")]
		public System.Nullable<int> HResult
		{
			get
			{
				return this._HResult;
			}
			set
			{
				if ((this._HResult != value))
				{
					this.OnHResultChanging(value);
					this.SendPropertyChanging();
					this._HResult = value;
					this.SendPropertyChanged("HResult");
					this.OnHResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line", DbType="Int")]
		public System.Nullable<int> Line
		{
			get
			{
				return this._Line;
			}
			set
			{
				if ((this._Line != value))
				{
					this.OnLineChanging(value);
					this.SendPropertyChanging();
					this._Line = value;
					this.SendPropertyChanged("Line");
					this.OnLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Column]", Storage="_Column", DbType="Int")]
		public System.Nullable<int> Column
		{
			get
			{
				return this._Column;
			}
			set
			{
				if ((this._Column != value))
				{
					this.OnColumnChanging(value);
					this.SendPropertyChanging();
					this._Column = value;
					this.SendPropertyChanged("Column");
					this.OnColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DuplicateNo", DbType="Int")]
		public System.Nullable<int> DuplicateNo
		{
			get
			{
				return this._DuplicateNo;
			}
			set
			{
				if ((this._DuplicateNo != value))
				{
					this.OnDuplicateNoChanging(value);
					this.SendPropertyChanging();
					this._DuplicateNo = value;
					this.SendPropertyChanged("DuplicateNo");
					this.OnDuplicateNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ErrorLog", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ErrorLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ErrorLogs.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExtraLinks")]
	public partial class ExtraLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _PortfolioId;
		
		private string _Name;
		
		private string _Link;
		
		private EntityRef<Portfolio> _Portfolio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPortfolioIdChanging(System.Guid value);
    partial void OnPortfolioIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    #endregion
		
		public ExtraLink()
		{
			this._Portfolio = default(EntityRef<Portfolio>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PortfolioId
		{
			get
			{
				return this._PortfolioId;
			}
			set
			{
				if ((this._PortfolioId != value))
				{
					if (this._Portfolio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPortfolioIdChanging(value);
					this.SendPropertyChanging();
					this._PortfolioId = value;
					this.SendPropertyChanged("PortfolioId");
					this.OnPortfolioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portfolio_ExtraLink", Storage="_Portfolio", ThisKey="PortfolioId", OtherKey="Id", IsForeignKey=true)]
		public Portfolio Portfolio
		{
			get
			{
				return this._Portfolio.Entity;
			}
			set
			{
				Portfolio previousValue = this._Portfolio.Entity;
				if (((previousValue != value) 
							|| (this._Portfolio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Portfolio.Entity = null;
						previousValue.ExtraLinks.Remove(this);
					}
					this._Portfolio.Entity = value;
					if ((value != null))
					{
						value.ExtraLinks.Add(this);
						this._PortfolioId = value.Id;
					}
					else
					{
						this._PortfolioId = default(System.Guid);
					}
					this.SendPropertyChanged("Portfolio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogHistory")]
	public partial class LogHistory
	{
		
		private System.DateTime _RunDate;
		
		private System.Nullable<System.Guid> _UserId;
		
		private bool _Success;
		
		private string _TryUsername;
		
		private string _TryPassword;
		
		private bool _LoginOrLogout;
		
		public LogHistory()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunDate", DbType="DateTime NOT NULL")]
		public System.DateTime RunDate
		{
			get
			{
				return this._RunDate;
			}
			set
			{
				if ((this._RunDate != value))
				{
					this._RunDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Success", DbType="Bit NOT NULL")]
		public bool Success
		{
			get
			{
				return this._Success;
			}
			set
			{
				if ((this._Success != value))
				{
					this._Success = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TryUsername", DbType="NVarChar(MAX)")]
		public string TryUsername
		{
			get
			{
				return this._TryUsername;
			}
			set
			{
				if ((this._TryUsername != value))
				{
					this._TryUsername = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TryPassword", DbType="NVarChar(MAX)")]
		public string TryPassword
		{
			get
			{
				return this._TryPassword;
			}
			set
			{
				if ((this._TryPassword != value))
				{
					this._TryPassword = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginOrLogout", DbType="Bit NOT NULL")]
		public bool LoginOrLogout
		{
			get
			{
				return this._LoginOrLogout;
			}
			set
			{
				if ((this._LoginOrLogout != value))
				{
					this._LoginOrLogout = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PortfolioCategories")]
	public partial class PortfolioCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PortfolioId;
		
		private int _CategoryId;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Portfolio> _Portfolio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPortfolioIdChanging(System.Guid value);
    partial void OnPortfolioIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    #endregion
		
		public PortfolioCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._Portfolio = default(EntityRef<Portfolio>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PortfolioId
		{
			get
			{
				return this._PortfolioId;
			}
			set
			{
				if ((this._PortfolioId != value))
				{
					if (this._Portfolio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPortfolioIdChanging(value);
					this.SendPropertyChanging();
					this._PortfolioId = value;
					this.SendPropertyChanged("PortfolioId");
					this.OnPortfolioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_PortfolioCategory", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.PortfolioCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.PortfolioCategories.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portfolio_PortfolioCategory", Storage="_Portfolio", ThisKey="PortfolioId", OtherKey="Id", IsForeignKey=true)]
		public Portfolio Portfolio
		{
			get
			{
				return this._Portfolio.Entity;
			}
			set
			{
				Portfolio previousValue = this._Portfolio.Entity;
				if (((previousValue != value) 
							|| (this._Portfolio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Portfolio.Entity = null;
						previousValue.PortfolioCategories.Remove(this);
					}
					this._Portfolio.Entity = value;
					if ((value != null))
					{
						value.PortfolioCategories.Add(this);
						this._PortfolioId = value.Id;
					}
					else
					{
						this._PortfolioId = default(System.Guid);
					}
					this.SendPropertyChanged("Portfolio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resources")]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _ElementUniqueId;
		
		private string _ResourceName;
		
		private string _ResourceLink;
		
		private EntitySet<Portfolio> _Portfolios;
		
		private EntityRef<Portfolio> _Portfolio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnElementUniqueIdChanging(System.Guid value);
    partial void OnElementUniqueIdChanged();
    partial void OnResourceNameChanging(string value);
    partial void OnResourceNameChanged();
    partial void OnResourceLinkChanging(string value);
    partial void OnResourceLinkChanged();
    #endregion
		
		public Resource()
		{
			this._Portfolios = new EntitySet<Portfolio>(new Action<Portfolio>(this.attach_Portfolios), new Action<Portfolio>(this.detach_Portfolios));
			this._Portfolio = default(EntityRef<Portfolio>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementUniqueId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ElementUniqueId
		{
			get
			{
				return this._ElementUniqueId;
			}
			set
			{
				if ((this._ElementUniqueId != value))
				{
					if (this._Portfolio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElementUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._ElementUniqueId = value;
					this.SendPropertyChanged("ElementUniqueId");
					this.OnElementUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ResourceName
		{
			get
			{
				return this._ResourceName;
			}
			set
			{
				if ((this._ResourceName != value))
				{
					this.OnResourceNameChanging(value);
					this.SendPropertyChanging();
					this._ResourceName = value;
					this.SendPropertyChanged("ResourceName");
					this.OnResourceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceLink", DbType="NVarChar(MAX)")]
		public string ResourceLink
		{
			get
			{
				return this._ResourceLink;
			}
			set
			{
				if ((this._ResourceLink != value))
				{
					this.OnResourceLinkChanging(value);
					this.SendPropertyChanging();
					this._ResourceLink = value;
					this.SendPropertyChanged("ResourceLink");
					this.OnResourceLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_Portfolio", Storage="_Portfolios", ThisKey="Id", OtherKey="IconId")]
		public EntitySet<Portfolio> Portfolios
		{
			get
			{
				return this._Portfolios;
			}
			set
			{
				this._Portfolios.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portfolio_Resource", Storage="_Portfolio", ThisKey="ElementUniqueId", OtherKey="Id", IsForeignKey=true)]
		public Portfolio Portfolio
		{
			get
			{
				return this._Portfolio.Entity;
			}
			set
			{
				Portfolio previousValue = this._Portfolio.Entity;
				if (((previousValue != value) 
							|| (this._Portfolio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Portfolio.Entity = null;
						previousValue.Resources.Remove(this);
					}
					this._Portfolio.Entity = value;
					if ((value != null))
					{
						value.Resources.Add(this);
						this._ElementUniqueId = value.Id;
					}
					else
					{
						this._ElementUniqueId = default(System.Guid);
					}
					this.SendPropertyChanged("Portfolio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Portfolios(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_Portfolios(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Role1;
		
		private string _Type;
		
		private System.Nullable<int> _ParentRoleId;
		
		private EntitySet<Role> _Roles;
		
		private EntitySet<UserInRole> _UserInRoles;
		
		private EntityRef<Role> _Role2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRole1Changing(string value);
    partial void OnRole1Changed();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnParentRoleIdChanging(System.Nullable<int> value);
    partial void OnParentRoleIdChanged();
    #endregion
		
		public Role()
		{
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._UserInRoles = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles), new Action<UserInRole>(this.detach_UserInRoles));
			this._Role2 = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Role", Storage="_Role1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Role1
		{
			get
			{
				return this._Role1;
			}
			set
			{
				if ((this._Role1 != value))
				{
					this.OnRole1Changing(value);
					this.SendPropertyChanging();
					this._Role1 = value;
					this.SendPropertyChanged("Role1");
					this.OnRole1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentRoleId", DbType="Int")]
		public System.Nullable<int> ParentRoleId
		{
			get
			{
				return this._ParentRoleId;
			}
			set
			{
				if ((this._ParentRoleId != value))
				{
					if (this._Role2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentRoleIdChanging(value);
					this.SendPropertyChanging();
					this._ParentRoleId = value;
					this.SendPropertyChanged("ParentRoleId");
					this.OnParentRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Role", Storage="_Roles", ThisKey="Id", OtherKey="ParentRoleId")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserInRole", Storage="_UserInRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<UserInRole> UserInRoles
		{
			get
			{
				return this._UserInRoles;
			}
			set
			{
				this._UserInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Role", Storage="_Role2", ThisKey="ParentRoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role2
		{
			get
			{
				return this._Role2.Entity;
			}
			set
			{
				Role previousValue = this._Role2.Entity;
				if (((previousValue != value) 
							|| (this._Role2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role2.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._Role2.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._ParentRoleId = value.Id;
					}
					else
					{
						this._ParentRoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Role2 = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Role2 = null;
		}
		
		private void attach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserInRoles(UserInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInRoles")]
	public partial class UserInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private int _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UserInRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserInRole", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserInRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserInRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserInRole", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserInRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Portfolios")]
	public partial class Portfolio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _ProjectName;
		
		private string _Summary;
		
		private string _MarkdownDescription;
		
		private System.DateTime _ModifyDate;
		
		private string _ProjectUrl;
		
		private System.Nullable<int> _IconId;
		
		private System.Nullable<double> _Rank;
		
		private EntitySet<ExtraLink> _ExtraLinks;
		
		private EntitySet<PortfolioCategory> _PortfolioCategories;
		
		private EntitySet<Resource> _Resources;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnMarkdownDescriptionChanging(string value);
    partial void OnMarkdownDescriptionChanged();
    partial void OnModifyDateChanging(System.DateTime value);
    partial void OnModifyDateChanged();
    partial void OnProjectUrlChanging(string value);
    partial void OnProjectUrlChanged();
    partial void OnIconIdChanging(System.Nullable<int> value);
    partial void OnIconIdChanged();
    partial void OnRankChanging(System.Nullable<double> value);
    partial void OnRankChanged();
    #endregion
		
		public Portfolio()
		{
			this._ExtraLinks = new EntitySet<ExtraLink>(new Action<ExtraLink>(this.attach_ExtraLinks), new Action<ExtraLink>(this.detach_ExtraLinks));
			this._PortfolioCategories = new EntitySet<PortfolioCategory>(new Action<PortfolioCategory>(this.attach_PortfolioCategories), new Action<PortfolioCategory>(this.detach_PortfolioCategories));
			this._Resources = new EntitySet<Resource>(new Action<Resource>(this.attach_Resources), new Action<Resource>(this.detach_Resources));
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(MAX)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkdownDescription", DbType="NVarChar(MAX)")]
		public string MarkdownDescription
		{
			get
			{
				return this._MarkdownDescription;
			}
			set
			{
				if ((this._MarkdownDescription != value))
				{
					this.OnMarkdownDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MarkdownDescription = value;
					this.SendPropertyChanged("MarkdownDescription");
					this.OnMarkdownDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="Date NOT NULL")]
		public System.DateTime ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectUrl", DbType="NVarChar(MAX)")]
		public string ProjectUrl
		{
			get
			{
				return this._ProjectUrl;
			}
			set
			{
				if ((this._ProjectUrl != value))
				{
					this.OnProjectUrlChanging(value);
					this.SendPropertyChanging();
					this._ProjectUrl = value;
					this.SendPropertyChanged("ProjectUrl");
					this.OnProjectUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconId", DbType="Int")]
		public System.Nullable<int> IconId
		{
			get
			{
				return this._IconId;
			}
			set
			{
				if ((this._IconId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIconIdChanging(value);
					this.SendPropertyChanging();
					this._IconId = value;
					this.SendPropertyChanged("IconId");
					this.OnIconIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="Float")]
		public System.Nullable<double> Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portfolio_ExtraLink", Storage="_ExtraLinks", ThisKey="Id", OtherKey="PortfolioId")]
		public EntitySet<ExtraLink> ExtraLinks
		{
			get
			{
				return this._ExtraLinks;
			}
			set
			{
				this._ExtraLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portfolio_PortfolioCategory", Storage="_PortfolioCategories", ThisKey="Id", OtherKey="PortfolioId")]
		public EntitySet<PortfolioCategory> PortfolioCategories
		{
			get
			{
				return this._PortfolioCategories;
			}
			set
			{
				this._PortfolioCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portfolio_Resource", Storage="_Resources", ThisKey="Id", OtherKey="ElementUniqueId")]
		public EntitySet<Resource> Resources
		{
			get
			{
				return this._Resources;
			}
			set
			{
				this._Resources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_Portfolio", Storage="_Resource", ThisKey="IconId", OtherKey="Id", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.Portfolios.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.Portfolios.Add(this);
						this._IconId = value.Id;
					}
					else
					{
						this._IconId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExtraLinks(ExtraLink entity)
		{
			this.SendPropertyChanging();
			entity.Portfolio = this;
		}
		
		private void detach_ExtraLinks(ExtraLink entity)
		{
			this.SendPropertyChanging();
			entity.Portfolio = null;
		}
		
		private void attach_PortfolioCategories(PortfolioCategory entity)
		{
			this.SendPropertyChanging();
			entity.Portfolio = this;
		}
		
		private void detach_PortfolioCategories(PortfolioCategory entity)
		{
			this.SendPropertyChanging();
			entity.Portfolio = null;
		}
		
		private void attach_Resources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.Portfolio = this;
		}
		
		private void detach_Resources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.Portfolio = null;
		}
	}
	
	public partial class sp_InsertErrorLogResult
	{
		
		private System.Nullable<decimal> _Column1;
		
		public sp_InsertErrorLogResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="", Storage="_Column1", DbType="Decimal(38,0)")]
		public System.Nullable<decimal> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
